
```{r}

# import packages
suppressPackageStartupMessages({
  library(dplyr)
  library(lme4)
  library(gt)
  library(ggplot2)
  library(marginaleffects)
})

# setup fonts
sysfonts::font_add_google("Inter")
showtext::showtext_auto()

# set plot theme
# inspired by https://github.com/z3tt/TidyTuesday/blob/main/R/2020_31_PalmerPenguins.Rmd
theme_set(theme_minimal(base_size = 16, base_family = "Inter")) +
  theme_update(
    plot.background = element_rect(fill = "white", color = "white"),
    panel.grid.major = element_line(color = "grey90", linewidth = .4),
    panel.grid.minor = element_blank(),
    axis.title.x = element_text(
      color = "grey30", margin = margin(t = 10), size = rel(1.2)
    ),
    axis.title.y = element_text(
      color = "grey30", margin = margin(r = 10), size = rel(1.2)
    ),
    axis.text = element_text(color = "grey50", size = rel(1.1)),
    axis.text.x = element_text(angle = 30, vjust = 1, hjust = .75),
    axis.ticks = element_line(color = "grey90", linewidth = .4),
    axis.ticks.length = unit(.2, "lines"),
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(
      size = rel(1.1), hjust = 0, margin = margin(0, 0, 0, 5)
    ),
    legend.spacing = unit(0, "cm"),
    legend.box.spacing = unit(0.5, "cm"),
    legend.key.width = unit(1, "cm"),
    plot.title = element_text(
      hjust = 0, color = "black",
      size = rel(2), margin = margin(t = 5, b = 5)
    ),
    plot.subtitle = element_text(
      hjust = 0, color = "grey30",
      lineheight = 0.8, size = rel(1.2), 
      margin = margin(10, 0, 10, 0)
    ),
    plot.title.position = "plot",
    plot.caption = element_text(
      color = "grey50", size = rel(1.1), hjust = 1,
      margin = margin(15, 0, 0, 0)
    ),
    plot.caption.position = "plot",
    plot.margin = margin(rep(20, 4))
  )

# set table theme
tbl_theme <-
  function(data, width = 100, alignment = "center") {
    data |>
      tab_source_note(
        source_note = "Source: FBref & Transfermarkt Via {worldfootballR}"
      ) |>
      tab_options(
        footnotes.marks = "standard",
        footnotes.spec_ref = "^xb", 
        footnotes.spec_ftr = "(x)",
        table.width = pct(width), 
        table.align = alignment,
        table.font.names = "Inter"
      ) |> 
      tab_style(
        style = cell_text(align = "left"),
        locations = list(cells_source_notes(), cells_footnotes())
      )
  }

# load data
club_resources <- 
  readr::read_rds(
    here::here("bvb", "money-in-football", "data", "club_resources.rds")
  )
```

```{r}

fit_mlms <- 
  function(data) {
    lmer(
      value ~ 1 + demean_squad + double_mean_club + time + 
        (1 + demean_squad | league/squad) + (1 | season),
      data = data, REML = TRUE,
      control = lmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 200000))
    )
  }

models <-
  club_resources |>
  mutate(
    squad_value = log(squad_value),
    mean_club = mean(squad_value),
    demean_squad = squad_value - mean_club,
    .by = squad
  ) |> 
  tidyr::pivot_longer(
    cols = c(pts, xgd, gd),
    names_to = "outcome",
    values_to = "value"
  ) |>
  mutate(
    double_mean_club = mean_club - mean(squad_value),
    value = value/mp,
    time = as.numeric(season) - 1,
    outcome =
      case_when(
        outcome == "pts" ~ "Points",
        outcome == "gd" ~ "Goal Difference",
        outcome == "xgd" ~ "xG Difference",
        .default = outcome
      )
  ) |>
  filter(!is.na(value)) |> 
  tidyr::nest(.by = c(outcome)) |> 
  mutate(
    model = purrr::map(data, fit_mlms),
    summary = purrr::map(model, broom.mixed::glance),
    coefs = purrr::map(model, ~ broom.mixed::tidy(.x, conf.int = TRUE)),
    preds = purrr::map(model, ~ predict(.x))
  )
```

```{r}

club_resources |> 
  filter(league == "Bundesliga") |> 
  summarise(squad_value = mean(squad_value), .by = squad) |> 
  arrange(desc(squad_value)) |> 
  slice_head(n = 5) |> 
  gt(rowname_col = "squad") |> 
  tab_header(
    title = "Average Squad Values Across Seasons in the Bundesliga",
    subtitle =
    glue::glue(
    "Mean average squad market values in the Bundesliga, from 2012/13 to 2023/24, ",
    "according to Transfermarkt player values."
    )
  ) |> 
  cols_label(squad_value = "Squad Values") |>
  fmt_currency(currency = "euro", suffixing = TRUE) |> 
  cols_align(align = "center", columns = is.numeric) |>
  tbl_theme() |> 
  gtsave(
    here::here("bvb", "money-in-football", "figures", "buli_squad_values.png"),
    expand = 10
    )


models |> 
  tidyr::unnest(c(data, preds)) |> 
  filter(outcome == "Points" & league == "Bundesliga") |> 
  mutate(pts = value) |> 
  select(squad, season, pts, squad_value, preds) |> 
  mutate(
    across(c(pts, preds), ~ .x * 34),
    squad_value = exp(squad_value)
  ) |> 
  correlation::correlation()
```

```{r}

models |>
  tidyr::unnest(c(data, preds)) |> 
  mutate(
    outcome =
      case_when(
        outcome == "Points" ~ "pts",
        outcome == "Goal Difference" ~ "gd",
        outcome == "xG Difference" ~ "xgd",
        .default = outcome
      )
  ) |> 
  filter(league == "Bundesliga") |> 
  select(outcome, squad, season, preds) |> 
  tidyr::pivot_wider(names_from = outcome, values_from = preds) |> 
  select(-xgd) |> 
  mutate(
    across(where(is.numeric), ~ .x * 34),
    ranking = min_rank(pick(pts, gd)),
    ranking = min_rank(desc(ranking)),
    .by = season
  ) |> 
  summarise(
    across(c(pts, ranking), mean),
    .by = squad
  ) |> 
  arrange(ranking) |>
  slice_head(n = 10) |> 
  gt(rowname_col = "squad") |> 
  gt::tab_header(
    title = "Average Predicted Rankings Across Seasons in the Bundesliga",
    subtitle =
    glue::glue(
    "Mean average ranking in the Bundesliga, from 2012/13 to 2023/24, based on ",
    "each season's predicted rankings calculated from the predicted points and ",
    "goal difference."
    )
  ) |> 
  tab_spanner(columns = c(pts, ranking), label = "Mean Average") |> 
  cols_label(
    pts = "Points",
    ranking = "Ranking"
  ) |>
  fmt_number(columns = pts, decimals = 0) |> 
  fmt_number(columns = ranking, decimals = 2) |> 
  cols_align(align = "center", columns = is.numeric) |>
  tbl_theme() |> 
  gtsave(
    here::here("bvb", "money-in-football", "figures", "buli_rankings.png"),
    expand = 10
    )
```

```{r}

plot_data <- 
  models |>
  tidyr::unnest(c(data, preds)) |> 
  mutate(
    outcome =
      case_when(
        outcome == "Points" ~ "pts",
        outcome == "Goal Difference" ~ "gd",
        outcome == "xG Difference" ~ "xgd",
        .default = outcome
      )
  ) |> 
  filter(league == "Bundesliga") |> 
  select(outcome, squad, season, preds) |> 
  tidyr::pivot_wider(names_from = outcome, values_from = preds) |> 
  select(-xgd) |> 
  mutate(
    across(where(is.numeric), ~ .x * 34),
    ranking = min_rank(pick(pts, gd)),
    ranking = min_rank(desc(ranking)),
    squad = case_when(
      squad == "Borussia Mönchengladbach" ~ "Mönchengladbach",
      .default = squad
      ),
    team_colour = case_when(
      squad == "Borussia Dortmund" ~ "#ffa600",
      squad == "Bayern Munich" ~ "#DB4254",
      squad == "RB Leipzig" ~ "#0c2043",
      squad == "Bayer Leverkusen" ~ "#BF3030",
      squad == "Wolfsburg" ~ "#79B350",
      squad == "Schalke" ~ "#004D9D",
      .default = "grey60"
      ),
    team_size_alpha = case_when(
      squad %in% 
        c(
          "Borussia Dortmund", "Bayern Munich", "RB Leipzig", 
          "Bayer Leverkusen", "Wolfsburg", "Schalke"
          ) ~ 1,
      .default = 0.3
      ),
    .by = season
  ) |> 
  filter(n() > 3, .by = squad)

plot_data |> 
  ggplot(
    aes(
      season, ranking, group = squad, colour = team_colour, 
      alpha = team_size_alpha, linewidth = team_size_alpha
      )
    ) +
  ggbump::geom_bump(smooth = 12) +
  geom_point(shape = 21, size = 4, stroke = 1.2, fill = "white") +
  ggrepel::geom_text_repel(
    data = 
      plot_data |> 
      filter(row_number() >= (n()), .by = squad),
    aes(
      x = "2023/24", y = ranking, colour = team_colour,
      label = squad
    ),
    nudge_x = 2.5, nudge_y = 0.25, box.padding = 0.25, hjust = 0.5, direction="y",
    point.padding = 0.25,  min.segment.length = Inf, max.overlaps = Inf,
    force = 1, size = 7, family = "Inter"
  ) +
  scale_x_discrete(
    breaks = c("2013/14", "2015/16", "2017/18", "2019/20", "2021/22", "2023/24")
  ) +
  scale_y_reverse(
    breaks = 1:18,
    ) +
  scale_colour_identity() +
  scale_alpha_identity() +
  scale_linewidth_identity() +
  labs(
    title = "Predicted League Standings Per Season in the Bundesliga", 
    subtitle =
      stringr::str_wrap(
        glue::glue(
          "Comparing Bayer Leverkusen, Bayern Munich, Borussia Dortmund, RB ",
          "Leipzig, Schalke, and Wolfsburg's predicted Bundesliga standings ",
          "from 2012/13 to 2023/24. Predictions based on each team's predicted ",
          "points and goal difference per season, conditional on squad values. ",
          "Minimum three seasons in the Bundesliga."
          ), width = 120
        ),
    x = NULL, y = NULL,
    caption = 
      "Visualisation: Paul Johnson | Data: FBref & Transfermarkt Via {worldfootballR}"
    ) +
  theme(panel.grid.major.y = element_blank())

ggsave(
  here::here("bvb", "money-in-football", "figures", "buli_standings.png"), 
  height = 18, width = 14, dpi = 120
)
```

```{r}
models |>
  filter(outcome == "Points") |> 
  tidyr::unnest(c(data, preds)) |> 
  mutate(
    value = value * mp,
    preds = round(preds * mp)
  ) |> 
  tidyr::pivot_longer(
    cols = c(value, preds), names_to = "type", values_to = "points"
  ) |> 
  mutate(
    type = 
      case_when(
        type == "value" ~ "Total Points",
        type == "preds" ~ "Predicted Points",
        .default = type
      )
  ) |> 
  filter(
    squad %in% c(
      "Bayer Leverkusen", "Bayern Munich", "Borussia Dortmund", "RB Leipzig"
    )
  ) |>
  ggplot(aes(season, points, group = type, linetype = type)) +
  geom_smooth(
    method = lm, formula = y ~ splines::ns(x, 3), 
    linewidth = 1, se = FALSE, colour = "#343a40"
  ) +
  geom_point(aes(fill = type), shape = 21, size = 3.5, stroke = 1.2) +
  scale_fill_manual(values = c("white", "#343a40")) +
  scale_linetype_manual(values = c("dashed", "solid")) +
  scale_x_discrete(
    expand = c(0.05, 0.05), 
    breaks = c("2013/14", "2015/16", "2017/18", "2019/20", "2021/22", "2023/24")
  ) +
  facet_wrap(facets = vars(squad), nrow = 3, scales = "free_x") +
  labs(
    title = "Bundesliga Top Four's Performances Above/Below Expectations",
    subtitle = 
      stringr::str_wrap(
        glue::glue(
          "Comparing Bayer Leverkusen, Bayern Munich, Borussia Dortmund, & RB ",
          "Leipzig's total and predicted points in the Bundesliga from 2012/13 ",
          "to 2023/24, conditional on squad market values per season."
        ),
        width = 110
      ),
    x = NULL, y = NULL,
    caption = 
      "Visualisation: Paul Johnson | Data: FBref & Transfermarkt Via {worldfootballR}"
  )

ggsave(
  here::here("bvb", "money-in-football", "figures", "buli_performance.png"), 
  height = 14, width = 12.5, dpi = 120
)
```

```{r}

models |>
  filter(outcome == "Points") |>
  tidyr::unnest(c(data, preds)) |>
  filter(n() > 3, .by = squad) |>
  filter(league == "Bundesliga") |> 
  mutate(
    value = value * mp,
    preds = round(preds * mp)
  ) |>
  summarise(
    mp = sum(mp),
    avg_ppg = sum(value)/mp,
    pred_ppg = sum(preds)/mp,
    pct_diff = (avg_ppg / pred_ppg) - 1,
    .by = c(squad, league)
  ) |>
  select(squad, mp, avg_ppg, pred_ppg, pct_diff) |> 
  arrange(desc(pct_diff)) |> 
  gt(rowname_col = "squad") |>
  gt::tab_header(
    title = "Bundesliga Performances Above/Below Expectations",
    subtitle = 
    glue::glue(
    "Bundesliga performance rankings based on each team's total points as a ",
    "percentage over/under their predicted points in the league from 2012/13 ",
    "to 2023/24, conditional on squad market values per season. Minimum 3 seasons ",
    "in the Bundesliga.")
    ) |> 
  cols_label(
    mp = "Matches Played",
    avg_ppg = "Average",
    pred_ppg = "Predicted",
    pct_diff ~ "Over/Under"
  ) |>
  tab_spanner(
    label = "Points Per Game",
    columns = c(avg_ppg, pred_ppg)
  ) |> 
  fmt_number(columns = c(avg_ppg, pred_ppg, pct_diff), decimals = 2) |> 
  fmt_percent(columns = pct_diff)  |>  
  cols_align(align = "center", columns = c(mp, avg_ppg, pred_ppg, pct_diff)) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_row_groups()
  ) |>
  tbl_theme() |> 
  gtsave(
    here::here("bvb", "money-in-football", "figures", "buli_performance_table.png"),
    expand = 10
    )
```

## Predicting 2024/25 Season

```{r}

player_values_raw <- 
  worldfootballR::tm_player_market_values(
    country_name = "Germany", start_year = 2024
  )

squad_values <- 
  player_values_raw |>
  dplyr::mutate(
    league = comp_name,
    season = season_start_year
  ) |> 
  tidyr::drop_na(player_market_value_euro) |>
  dplyr::summarise(
    squad_value = sum(player_market_value_euro),
    .by = c(squad, league, season)
  ) |> 
  mutate(
    season =
      forcats::as_factor(
        glue::glue(
          "{season}/{as.numeric(stringr::str_sub(season, start = -2)) + 1}"
        )
      )
  )

season_preds <- 
  squad_values |> 
  mutate(
    squad_value = log(squad_value),
    mean_club = mean(squad_value),
    demean_squad = squad_value - mean_club,
    .by = squad
  ) |> 
  mutate(
    double_mean_club = mean_club - mean(squad_value),
    time = 12
  )

season_preds |> 
  mutate(
    pts = predict(models$model[[1]], season_preds, allow.new.levels = TRUE) * 34,
    gd = predict(models$model[[2]], season_preds, allow.new.levels = TRUE) * 34,
    xgd = predict(models$model[[3]], season_preds, allow.new.levels = TRUE) * 34
    ) |> 
  arrange(desc(pts), desc(gd), desc(xgd)) |> 
  select(squad, pts, gd, xgd) |> 
  gt(rowname_col = "squad") |> 
  gt::tab_header(
    title = "Predicted Bundesliga Standings 2024/25",
    subtitle =
    glue::glue(
    "Predicted points, goal difference, and expected goals (xG) difference for ",
    "the 2024/25 Bundesliga season. Predictions computed from a model estimating ",
    "the effect of squad market values on football outcomes."
    )
  ) |> 
  cols_label(
    pts = "Points",
    gd = "Goal Difference",
    xgd = "xG Difference"
  ) |>
  fmt_number(columns = c(pts, gd), decimals = 0) |> 
  fmt_number(columns = xgd, decimals = 1) |> 
  cols_align(align = "center", columns = is.numeric) |>
  tab_style(
    style = cell_text(color = "#ffa62b"),
    locations = cells_stub(rows = 1)
  ) |>
  tab_style(
    style = cell_text(color = "#ffa62b"),
    locations = cells_body(rows = 1, columns = everything())
  ) |>
  tab_style(
    style = cell_text(color = "#2c6e49"),
    locations = cells_stub(rows = 2:4)
  ) |>
  tab_style(
    style = cell_text(color = "#2c6e49"),
    locations = cells_body(rows = 2:4, columns = everything())
  ) |>
  tab_style(
    style = cell_text(color = "#4c956c"),
    locations = cells_stub(rows = 5:6)
  ) |>
  tab_style(
    style = cell_text(color = "#4c956c"),
    locations = cells_body(rows = 5:6, columns = everything())
  ) |>
  tab_style(
    style = cell_text(color = "#DB4254"),
    locations = cells_stub(rows = 16:18) 
  ) |>
  tab_style(
    style = cell_text(color = "#DB4254"),
    locations = cells_body(rows = 16:18, columns = everything())
  ) |>
  tbl_theme() |> 
  gtsave(
    here::here("bvb", "money-in-football", "figures", "predicted_standings.png"),
    expand = 10
    )
```